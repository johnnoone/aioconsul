from collections import namedtuple

__all__ = ['Token', 'Rule', 'Check', 'Event', 'Member',
           'Node', 'Service', 'NodeService', 'Session',
           'DataSet', 'DataMapping', 'Key']


class Token:
    """
    A token has an ID, a name, a type and a :py:class:`Rule` set.
    The ID is randomly generated by the API, making it unfeasible to guess.
    The name is opaque and human readable. The type is either "client"
    meaning it cannot modify ACL rules, and is restricted by the provided
    rules, or is "management" and is allowed to perform all actions.

    The token ID is passed along with each RPC request to the servers.

    Attributes:
        id (str): token id
        name (str): token name
        type (str): token type
        rules (list): list of token :class:`Rule`
        create_index (int): create index when fetched
        modify_index (int): modify index when fetched
    """

    def __init__(self, id, *, name, type, rules,
                 create_index=None, modify_index=None):
        self.id = id
        self.name = name
        self.type = type
        self.rules = rules or []
        self.create_index = create_index
        self.modify_index = modify_index

    def __iter__(self):
        return iter(self.rules)

    def __eq__(self, other):
        return self.id == other.id

    def __hash__(self):
        return hash(self.id)

    def __repr__(self):
        return '<Token(id=%r, name=%r)>' % (self.id, self.name)


class Rule(namedtuple('Rule_', 'type value policy')):
    """Describe the policy that must be enforced.

    Key policies provide both a prefix and a policy.
    The rules are enforced using a longest-prefix match policy.
    This means we pick the most specific policy possible.
    The policy is either "read", "write" or "deny".

    Services policies provide both a service name and a policy.
    The rules are enforced using an exact match policy.
    The default rule is provided using the empty string.
    The policy is either "read", "write", or "deny".

    Attributes:
        type (str): key or service
        value (str): value of rule
        policy (str): read, write or deny
    """


class Check:
    """
    Attributes:
        id (str): id
        name (str): name
        status (str): status
        notes (str): notes
        output (str): output
        service_id (str): service_id
        service_name (str): service_name
        node (str): node
    """

    def __init__(self, id, *, name, status=None, notes=None,
                 output=None, service_id=None, service_name=None, node=None):
        self.id = id
        self.name = name
        self.status = status
        self.notes = notes
        self.output = output
        self.service_id = service_id
        self.service_name = service_name
        self.node = node

    def __repr__(self):
        return '<Check(id=%r, name=%r)>' % (self.id, self.name)


class Event(object):
    """
    Attributes:
        id (str): id
        name (str): name
        payload (str): payload
        node_filter (str): node_filter
        service_filter (str): service_filter
        tag_filter (str): tag_filter
        version (str): version
        l_time (str): l_time
    """

    def __init__(self, name, *, id=None, payload=None,
                 node_filter=None, service_filter=None, tag_filter=None,
                 version=None, l_time=None):
        self.id = id
        self.name = name
        self.payload = payload
        self.node_filter = node_filter
        self.service_filter = service_filter
        self.tag_filter = tag_filter
        self.version = version
        self.l_time = l_time

    def __eq__(self, other):
        return self.id == other.id

    def __hash__(self):
        return hash(self.id)

    def __repr__(self):
        return '<Event(id=%r, name=%r)>' % (self.id, self.name)


class Member:
    """
    Attributes:
        name (str): name
        address (str): address
        port (int): port
    """
    def __init__(self, name, address, port, **params):
        self.name = name
        self.address = name
        self.port = port
        for k, v in params.items():
            setattr(self, k, v)

    def __eq__(self, other):
        return self.name == other.name

    def __repr__(self):
        return '<Member(name=%r, address=%r, port=%r)>' % (
            self.name, self.address, self.port)


class Node:
    """
    Attributes:
        name (str): name
        address (str): address
    """

    def __init__(self, name, address):
        self.name = name
        self.address = address

    def __iter__(self):
        if hasattr(self, 'service'):
            return iter([self.service])
        if hasattr(self, 'services'):
            return self.services.values()
        raise TypeError('Does not have service nor services')

    def __eq__(self, other):
        return self.name == other.name

    def __hash__(self):
        return hash(self.name)

    def __str__(self):
        return str(self.name)

    def __repr__(self):
        return '<Node(name=%r)>' % self.name


class Service:
    """
    Attributes:
        id (str): id
        name (str): name
    """

    def __init__(self, id, *, name):
        self.id = id
        self.name = name

    def __eq__(self, other):
        return self.id == other.id

    def __hash__(self):
        return hash(self.id)

    def __str__(self):
        return str(self.id)

    def __repr__(self):
        return '<Service(id=%r)>' % self.id


class NodeService(Service):
    """A service that belongs to a node.

    Attributes:
        id (str): id
        name (str): name
        address (str): address
        port (int): port
        tags (list): tags
    """

    def __init__(self, id, *, name, address=None, port=None, tags=None):
        Service.__init__(self, id, name=name)
        self.address = address
        self.port = port
        self.tags = tags

    def __repr__(self):
        return '<NodeService(id=%r)>' % self.id


class Session:
    def __init__(self, id, *, node=None, checks=None,
                 create_index=None, behavior=None):
        self.id = id
        self.behavior = behavior
        self.checks = checks
        self.create_index = create_index
        self.node = node

    def __eq__(self, other):
        return self.id == other.id

    def __repr__(self):
        return '<Session(id=%r)>' % self.id


class DataMapping(dict):
    def __init__(self, values, *, modify_index=None, last_contact=None):
        super(DataMapping, self).__init__(values)
        self.modify_index = modify_index
        self.last_contact = last_contact


class DataSet(set):
    def __init__(self, keys, *, modify_index=None, last_contact=None):
        super(DataSet, self).__init__(keys)
        self.modify_index = modify_index
        self.last_contact = last_contact


class Key:
    """
    Attributes:
        name (str): key
        create_index (int): create_index
        lock_index (int): lock_index
        modify_index (int): modify_index
    """
    def __init__(self, name, *, create_index=None,
                 modify_index=None, lock_index=None):
        self.name = name
        self.create_index = create_index
        self.modify_index = modify_index
        self.lock_index = lock_index

    def __eq__(self, other):
        return self.name == other.name

    def __hash__(self):
        return hash(self.key)

    def __repr__(self):
        return '<Key(key=%r)>' % self.key
